global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

endglobal


snippet template "Basic template" b
\documentclass[a4paper]{article}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage[dutch]{babel}
\usepackage{amsmath, amssymb}


% figure support
\usepackage{import}
\usepackage{xifthen}
\pdfminorversion=7
\usepackage{pdfpages}
\usepackage{transparent}
\newcommand{\incfig}[1]{%
	\def\svgwidth{\columnwidth}
	\import{./figures/}{#1.pdf_tex}
}

\pdfsuppresswarningpagegroup=1

\begin{document}
	$0
\end{document}
endsnippet

snippet sec "section" bA
\section{$0}
endsnippet

snippet "Prob(lem)?" "problem" ri
\section{Problem $1}
$0
endsnippet

snippet "Part" "part" ri
\subsection{Part ($1)}
$0
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

priority 100
snippet ... "ldots" iA
\ldots
endsnippet

# Shorthand for time derivative
context "math()"
snippet dot "dot above" iA
\\dot{$1} $0
endsnippet

# Shorthand for second order time derivative
context "math()"
snippet ddot "double dot above" iA
\\ddot{$1} $0
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
.\] $0
endsnippet

snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
.\end{align*}
endsnippet


snippet gat "Gather"
\begin{gather*}
	${1:${VISUAL}}
.\end{gather*}
endsnippet
context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet


snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

snippet == "equals" iA
&= $1 \\\\
endsnippet

snippet != "equals" iA
\neq 
endsnippet

context "math()"
snippet comp "composition" iA
\circ 
endsnippet

snippet ~= "isomorphism" iA
\cong 
endsnippet

# snippet ~~ "isomorphism" iA
# \approx 
# endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

context "math()"
snippet stretch "stretch matrix / vector / aligned"
\\begingroup
\\renewcommand*{\\arraystretch}{1.5}
$0
\\endgroup
endsnippet

global !p

# Define matrix size in terms of rows/columns
def mat(snip):
	rows = snip.buffer[snip.line].split('.')[0]
	cols = snip.buffer[snip.line].split('.')[1]

	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))
	
	r = int_val(rows)
	c = int_val(cols)

	offset = c + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('    ')]
	
	snip.buffer[snip.line] = ''
	
	final_str = old_spacing + "    " + "\\begin{pmatrix}\n"

	for i in range(r):
		final_str += old_spacing + '    ' * 2
		final_str += " & ".join(['$' + str(i * c + j + offset) for j in range(c)])
		final_str += " \\\\\\\n"
	final_str += old_spacing + "    " + "\\end{pmatrix}\n$0"

	snip.expand_anon(final_str)
endglobal

# Function that lets you specificy an nxm matrix

pre_expand "mat(snip)"
snippet "(\d+).(\d+)mat" "Add matrix" riA
endsnippet

context "math()"
snippet sys "system of equations" iA
\left\\{
\begin{aligned}
    $0 \\\\
\end{aligned}
\right.
endsnippet
snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

context "math()"
snippet "(\S+) choose " "binomial coefficient" riA
\binom{`!p snip.rv = match.group(1)`}{$0}
endsnippet

context "math()"
snippet 2vec "Vector in R2" iA
\begin{pmatrix} $1 \\\\ $2 \end{pmatrix} $0
endsnippet

context "math()"
snippet 3vec "Vector in R3" iA
\begin{pmatrix} $1 \\\\ $2 \\\\ $3 \end{pmatrix} $0
endsnippet

context "math()"
snippet 4vec "Vector in R3" iA
\begin{pmatrix} $1 \\\\ $2 \\\\ $3 \\\\ $4 \end{pmatrix} $0
endsnippet

context "math()"
snippet span "Span{}" iA
\\text{Span}\\left\\{$1\\right\\} $0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

context "math()"
snippet polring "Polynomial Ring" iA
k[x_1,\ldots,x_n]
endsnippet

context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

snippet sum "sum" w
\sum_{n=${1:1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{($1)}$0
endsnippet

context "math()"
snippet __ "subscript" iA
_{$1}$0
endsnippet

priority 50
snippet __ "emphasis" iA
\emph{$1}$0
endsnippet

priority 50
snippet ** "bold textbf" iA
\textbf{$1}$0
endsnippet

snippet ooo "\infty" iA
\infty
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

snippet <= "leq" iA
\le 
endsnippet

snippet >= "geq" iA
\ge 
endsnippet

context "math()"
snippet EE "geq" iA
\exists 
endsnippet

context "math()"
snippet AA "forall" iA
\forall 
endsnippet

context "math()"
snippet xnn "xn" iA
x_{n}
endsnippet

context "math()"
snippet ynn "yn" iA
y_{n}
endsnippet


context "math()"
snippet xii "xi" iA
x_{i}
endsnippet

context "math()"
snippet yii "yi" iA
y_{i}
endsnippet

context "math()"
snippet xjj "xj" iA
x_{j}
endsnippet

context "math()"
snippet yjj "yj" iA
y_{j}
endsnippet

context "math()"
snippet xp1 "x" iA
x_{n+1}
endsnippet

context "math()"
snippet xmm "x" iA
x_{m}
endsnippet

snippet R0+ "R0+" iA
\\R_0^+
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

snippet lll "l" iA
\ell
endsnippet

context "math()"
snippet nabl "nabla" iA
\nabla 
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

priority 100
context "math()"
snippet ** "cdot" iA
\cdot 
endsnippet

context "math()"
snippet Norm "norm" iA
\left|\left|$1\right|\right|$0
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 110
context "math()"
snippet |-> "mapsto" iA
\mapsto 
endsnippet

priority 100
context "math()"
snippet -> "to" iA
\to 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

snippet >> ">>" iA
\gg
endsnippet

snippet << "<<" iA
\ll
endsnippet


snippet ~~ "~" iA
\sim 
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\} $0
endsnippet

snippet || "mid" iA
 \mid 
endsnippet


context "math()"
snippet cc "subset" Ai
\subset 
endsnippet

context "math()"
snippet Cc "subseteq" Ai
\subseteq 
endsnippet

context "math()"
snippet notin "not in " iA
\not\in 
endsnippet

context "math()"
snippet inn "in " iA
\in 
endsnippet

context "math()"
snippet NN "n" iA
\mathbb{N}
endsnippet

context "math()"
snippet SS "n" iA
\mathbb{S}
endsnippet

context "math()"
snippet ZZ "n" iA
\mathbb{Z}
endsnippet

context "math()"
snippet QQ "n" iA
\mathbb{Q}
endsnippet

context "math()"
snippet RR "n" iA
\mathbb{R}
endsnippet

context "math()"
snippet CC "n" iA
\mathbb{C}
endsnippet

snippet Nn "cap" iA
\cap 
endsnippet

snippet UU "cup" iA
\cup 
endsnippet

snippet uuu "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

snippet nnn "bigcap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet OO "emptyset" iA
\emptyset
endsnippet

snippet <! "normal" iA
\triangleleft 
endsnippet

snippet <> "hokje" iA
\diamond 
endsnippet


context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

snippet Case "proof case" i
\vspace{0.75em}\emph{($1).} $0
endsnippet

snippet SI "SI" iA
\SI{$1}{$2}
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

# it's r_2fun instead of r2fun because r2 is expanded to r_2
snippet r_2fun "Function in R^2 to R^2" iA
$1 : \mathbb{R}^2 \to \mathbb{R}^2 $0
endsnippet

snippet rfun "Function in R to R" iA
$1 : \mathbb{R} \to \mathbb{R} $0
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

priority 15
context "math()"
snippet "~hat" "tilde ~ hat" riA
\tilde{$1}$0
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet


snippet EU "E2" iA
\mathbb{E}^2
endsnippet

snippet HH "H" iA
\mathbb{H}
endsnippet

snippet DD "D" iA
\mathbb{D}
endsnippet

global !p
greekletterdict={
"&": "wedge",
"%": "varphi",
"a": "alpha",
"b": "beta",
"c": "chi",
"d": "delta",
"e": "epsilon",
"f": "phi",
"g": "gamma",
"h": "eta",
"i": "iota",
"k": "kappa",
"l": "lambda",
"m": "mu",
"n": "nu",
"o": "omega",
"p": "pi",
"q": "theta",
"r": "rho",
"s": "sigma",
"s": "sigma",
"t": "tau",
"u": "upsilon",
"x": "xi",
"y": "psi",
"z": "zeta",
"D": "Delta",
"F": "Phi",
"G": "Gamma",
"L": "Lambda",
"Q": "Theta",
"S": "Sigma",
"U": "Upsilon",
"W": "Omega",
"X": "Xi",
"Y": "Psi",
}
endglobal

context "math()"
snippet '(?<!\\)@([a-zDFGQLXYSUW&%])' "ln" rwA
\\`!p snip.rv = greekletterdict.get(match.group(1),'')`
endsnippet

context "math()"
snippet "AND" "AND" riA
\wedge
endsnippet

context "math()"
snippet "OR" "OR" riA
\vee
endsnippet

context "math()"
snippet "XOR" "XOR" riA
\oplus
endsnippet

context "math()"
snippet "NOT" "NOT" riA
\neg
endsnippet

context "math()"
snippet "id" "ideal" ri
\bm{\mathrm{I}}$0
endsnippet

context "math()"
snippet "bm" "bold" rA
\bm{$1}$0
endsnippet

context "math()"
snippet "list" "a_1,...,a_n" ri
$1_1,\ldots,$1_$0
endsnippet

snippet col2 "Two Column environment (needs \usepackage{multicol})"
\begin{multicols*}{2}
$1
\columnbreak
$2
\end{multicols*}
endsnippet

snippet col2balanced "Two Column vertically balanced environment (needs \usepackage{multicol})"
\begin{multicols}{2}
$1
\columnbreak
$2
\end{multicols}
endsnippet

snippet colvarewidth "N column environment with different widths (needs \usepackage{vwcol})"
\begin{vwcol}[widths={0.$1,0.$2}]
$0
\end{vwcol}
endsnippet

# vim:ft=snippets
