# vim ft=zsh
# leave one line blank for compatibility
alias upfont="sudo fc-cache -fv"
alias cal="cal -m" # Monday it's always the first day of the week here!
alias tmux="tmux -2"
alias pingg="ping -a perdu.com"
alias rsync="rsync --info=progress2"

# Python aliases
alias v="source venv/bin/activate"
alias d="deactivate"

alias setclip='xclip -selection c'
alias getclip='xclip -selection clipboard -o'
alias pasteclip='getclip'
alias copyclip='setclip'

alias sxiv='nsxiv'

alias screensaver_off="xset s off;xset -dpms;xset s noblank"
moviemode() {
    xset s off
    xset -dpms
    xset s noblank
    killall xautolock
    systemctl --user stop mbsync.service
    systemctl --user stop mbsync.timer
    systemctl --user stop dunst.service
    killall redshift
}

#fast edit shiortcuts
[ -f "/usr/bin/nvim" ] && alias vim="/usr/bin/nvim"
alias :e=em
alias bc="bc -l"

#systemctl aliases
alias sysa="sudo systemctl start"
alias syso="sudo systemctl stop"
alias syss="sudo systemctl status"
alias sysr="sudo systemctl restart"
alias syse="sudo systemctl enable --now"

alias usysa="systemctl --user start"
alias usyso="systemctl --user stop"
alias usyss="systemctl --user status"
alias usysr="systemctl --user restart"
alias usyse="systemctl --user enable --now"
alias usys="systemctl --user"

alias joxe="sudo journalctl -xe"
alias joxeu="sudo journalctl -xe --unit"

alias did="vim +'normal Go' +'r!date' ~/docs/did.txt"
alias mail="mail -r giuseppe@gstelluto.com"
>&/dev/null hash neomutt && alias mutt='neomutt'
alias mailsync="pkill -SIGUSR1 offlineimap"
alias vp="zathura --fork"
alias zathura="zathura --fork"

alias tarsnap="tarsnap --configfile ~/.config/tarsnap/tarsnaprc"
alias mopidy="mopidy --config ~/.config/mopidy/mopidy.conf"

mdmake() {
    cp "$HOME/.config/templates/pandoc/Makefile" "."
    cp "$HOME/.config/templates/pandoc/doc.md" "$1"
}


if hash pinfo >&/dev/null; then
    alias info='pinfo'
fi

alias l='ls'
alias la='ll -a'
alias ll='ls -lh'
alias lt='ls -l --tree'
alias ltg='ls -l --tree --git'

if hash exa >&/dev/null; then
    alias ls='exa --sort=name --icons'   
    alias lt='exa -T'
    alias lg='exa --long --git'
    alias ll='ls -lh --git'
    if [ -n "$SSH_CONNECTION" ];  then
        alias ls='exa --sort=name --no-icons'   
    fi
fi

if [ "$SHELL" = /bin/zsh ]; then 
    if [[ "$PAGER" = 'bat' || "$PAGER" =~ ".*bat.*" ]]; then
        alias -g LL="| $PAGER --plain"
        alias -g LLH="--help | $PAGER --plain --language=cmd-help"
        alias -g LLC="--color=always | $PAGER --plain"
        alias -g LLA="2>&1 | $PAGER"
        alias -g BB="| $PAGER --style auto"
        alias -g BBC="--color=always | $PAGER --style auto"
        alias -g BBA="2>&1 | $PAGER --style auto"
        alias -g JQ="| jq | $PAGER --language=json"
        alias -g LLJ="| $PAGER --language=json"
    else
        alias -g LL="| $PAGER"
        alias -g LLH="--help | $PAGER"
        alias -g LLC="--color=always | $PAGER"
        alias -g LLA="2>&1 | $PAGER"
        alias -g JQ="| jq | $PAGER"
    fi
    alias -g G="| grep --ignore-case --extended-regexp"
    alias -g NNNSEL='$(nnn -p -)'
    alias -g CSVLL="| csv2table.sh"
    alias -g MRF="*(om[1])"
    alias -g LASTF="*(om[1])"
fi
if hash rg &>/dev/null;then 
    alias rgc='rg --color always'
fi
if hash fd &>/dev/null;then 
    alias fdc='fd --color always'
fi

export _JAVA_AWT_WM_NONREPARENTING=1

addalias() {
    echo "alias $1=\"$2\"" >> ~/.zsh_aliases
}

[ -e "$HOME/bin/util/gpg-wrapper.zsh" ] && source ~/bin/util/gpg-wrapper.zsh

alias riot-web="qutebrowser ':open -w https://riot.im/app/#'"

alias https="http --default-scheme=https"

read_all_mail() {
    find "$MAIL" -type f | grep -vE ',[^,]*S[^,]*$' | xargs -I{} sh -c 'mv {} $(echo {} | sed "s/new/cur/; s/2,$/2,S/")'
}

copy_dotfiles() {
    [[ -z "$1" ]] && echo "You need to provide a ssh hostname!" && return
    server="$1"
    echo "Copying to: $server"
    if [[ "$(ssh "$server" 'echo $SHELL')" =~ 'zsh' ]]; then
        \rsync --timeout 3 -vh ~/dot/zsh/.* "$server:"
    else
        \rsync --timeout 3 -vh ~/dot/bash/.* "$server:"
    fi
    cat ~/dot/aliases/.* | ssh -o 'ConnectTimeout=3' "$server" "tee ~/.aliases" >/dev/null
    \rsync --timeout 3 -vh ~/dot/tmux/.config/tmux/tmux.conf "$server:.tmux.conf"
}

sync_dotfiles() {
    copy_dotfiles medoro
    copy_dotfiles diana
    copy_dotfiles persephone
    copy_dotfiles sardanapalo
    copy_dotfiles sacripante
}
alias copy_dotfiles_all=sync_dotfiles

move_all_output() {
    sink="$1"
    inputs=$(pactl list short sink-inputs | cut -f1)
    echo "$inputs" | xargs -I{} pactl move-sink-input {} "$sink"
}

fan(){
    echo "level $1" | sudo tee /proc/acpi/ibm/fan
}

alias gamma_vga="xgamma -ggamma 0.58 -bgamma 0.7 -rgamma 0.58"

# for mnemonics/completion
alias xgamma_vga=gamma_vga

alias gamma_laptop="xgamma -rgamma 0.78 -bgamma 0.65 -ggamma 0.72"

alias cp_torrent="rsync -r --info=progress2 'astolfo.gstelluto.com:/var/lib/transmission-daemon/downloads/*' /data/movies"

tldr() {
    curl -s "cheat.sh/$(echo -n "$*" | jq -sRr @uri)" | less -R
}

weechat="mosh weechat"

alias c="source ~/bin/college/c"
alias ccd="source ~/bin/college/ccd"
alias m="source ~/bin/college/m"
alias mcd="source ~/bin/college/ccd --moodle"
alias syl="~/bin/college/syllabus"

alias dmenu="rofi -dmenu"

alias ksac="kdeconnect-cli -n sacripante"

# e() {
# eval $* &! 
# exit
# }

alias pastebin="nc termbin.com 9999"
alias todo.sh="todo.sh -d ~/.config/todotxt/todo.cfg"

alias rm='echo "This is not the command you are looking for."; false'
alias rrm='trash-put'
alias trash-restore='trash-restore "$(trash-list | fzf --reverse -q "$(realpath "$PWD") " | sed "s/\S* \S* //")"'
alias psgrep='ps aux | grep '

ssps() {
    read -r -d '' awkcommand <<'    EOF'
    { 
        sub(".+pid=", "", $7); 
        sub(",.+", "", $7); 
        pout=""; 
        if(length($7) > 0) {
            pscomm="ps --no-headers -o pid,command -q "$7; 
            pscomm | getline pout; 
            close(pscomm); 
            sub("[0-9]+", "&\t", pout); 
        }
        print $1 "\t" $5 "\t" pout; 
    }
    EOF
    awkcommand=$(echo "$awkcommand" | sed -r 's!^\s{4}!!')
    sudo ss -tlnupH "$1" | awk "$awkcommand" | sed 's/  */ /g;' | sed -E ' s/:([0-9]+)\t/\t:\1\t/;' | cut -c -70 | column -s$'\t' -t -R 2 -N proto,addr,port,pid,process
}
alias pgrep="pgrep -a -f"

# [[ "$SHELL" =~ /bin/zsh ]] && alias "lxc list"="sudo lxc list -c ns4"
# alias "lxclist"="sudo lxc list -c ns4"
# alias lxc="sudo lxc"
lxcsh () {
        local oldname="$(tmux display-message -p '#W')"
        tmux rename-window "$1"
        local instance="$1"
        shift
        if [ -z "$2" ]; then
                set -- sh -l
        fi
        sudo lxc exec "$instance" -- "$@"
        tmux rename-window "$oldname"
}

send2ebook () {
    scp "$1" diana:/home/ftpinusc/ftpbook
}

if [ "$SHELL" = /bin/zsh ]; then 
alias -g ...="../.."
alias -g ....="../../.."
alias -g .....="../../../.."
fi

alias N='sudo -E nnn -dH'
[ "$SHELL" = /bin/zsh ] && alias -g NPICK='$(nnn -p -)'
# autocd for nnn
n ()
{
    # Block nesting of nnn in subshells
    if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
        echo "nnn is already running"
        return
    fi

    # The default behaviour is to cd on quit (nnn checks if NNN_TMPFILE is set)
    # To cd on quit only on ^G, remove the "export" as in:
    #     NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    # NOTE: NNN_TMPFILE is fixed, should not be modified
    export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

    # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
    # stty start undef
    # stty stop undef
    # stty lwrap undef
    # stty lnext undef

    nnn "$@"

    if [ -f "$NNN_TMPFILE" ]; then
            . "$NNN_TMPFILE"
            \rm -f "$NNN_TMPFILE" > /dev/null
    fi
}

jog () {
    local N="${1:-15}"
    grep -a "${PWD}   " ~/.zsh_history_ext | cut -f1 -d"|" | grep -E --invert-match '^jog' | tail -n "$N"
}

earthengine_notify () {
    ee_command='
NAME=$(echo {} | cut -d" " -f3);
ID=$(echo {} | cut -d" " -f1);
notify-send "Earthengine: waiting on $ID";
earthengine task wait "$ID";
notify-send "Earth Engine Task Completed: $NAME";
'
    mailcommand='echo -n "Subject: EE Task completed $NAME\n\nEnjoy :)" | sendmail -f noreply@gstelluto.com gstell23@colby.edu'
    if [ "$1" = '--email' ]; then
        ee_command="$ee_command\n$mailcommand"
    fi
    earthengine task list | grep -e READY -e RUNNING | sed 's/"/\"/' | xargs -I{} -P100 sh -c "$ee_command"
}

earthengine_notify_bulk () {
    ee_command='
notify-send "Earth Engine Task Completed: $NAME";
echo -n "Subject: EE Task completed $NAME\n\nEnjoy :)" | sendmail -f noreply@gstelluto.com gstell23@colby.edu
'
# echo $ee_command
    earthengine task list | grep -e READY -e RUNNING | sed 's/"/\"/' | cut -d" " -f1 | xargs earthengine task wait -v ; notify-send "Earth Engine: all tasks completed"; echo -e -n "Subject: EE Task completed \n\nEnjoy :)" | sendmail -f noreply@gstelluto.com gstell23@colby.edu
}

bluetooth_restart () {
    sudo rmmod btusb
    sudo modprobe btusb
    sudo systemctl restart bluetooth
    bluetoothctl -- power on
}
alias restart_bluetooth=bluetooth_restart

pdfcut () {
    if [ "$1" = -h ] || [ -z "$1" ] || [ -z "$2" ]; then
        echo "Usage: pdfcut FILE RANGE"
        echo "Replaces FILE with a pdf only containing the pages in range."
        echo "To cut pages in half (e.g. from scans) use pdfhalf"
        return 1
    fi
    local outf
    local zathura_pid
    outf="$(mktemp pdfcut-XXXX.pdf)"
    pdfjam  --fitpaper true --outfile "$outf" "$1" "$2"
    \zathura "$outf" &
    zathura_pid=$!
    if read -q "RES?Is this okay? "; then
        \rm "$1"
        mv "$outf" "$1"
    else 
        \rm "$outf"
    fi
    kill "$zathura_pid"
}

pdfhalf() {
    if [ "$1" = -h ] || [ -z "$1" ]; then
        echo "Usage: pdfhalf FILE"
        echo "Replaces FILE with a pdf with the pages from FILE vertically cut in half (both halves included)"
        echo "Runs mutool poster -x 2 INFILE OUTFILE, for horizontal cuts use -x"
        return 1
    fi
    local outf
    local zathura_pid
    outf="$(mktemp pdfcut-XXXX.pdf)"
    mutool poster -x 2 "$1" "$outf"
    \zathura "$outf" &
    zathura_pid=$!
    if read -q "RES?Is this okay? "; then
        \rm "$1"
        mv "$outf" "$1"
    else 
        \rm "$outf"
    fi
    kill "$zathura_pid"
}

pdfrotate() {
    if [ "$1" = -h ] || [ -z "$1" ]; then
        echo "Usage: pdfrotate FILE [DIR]"
        echo "Replaces FILE with a pdf with pages rotated by 90 in DIR [default clockwise]"
        return 1
    fi
    local outf
    local zathura_pid
    outf="$(mktemp pdfcut-XXXX.pdf)"
    if [ "$2" = counterclockwise ]; then
        pdfjam --landscape --angle 90 --outfile "$outf" "$1" 
    else
        pdfjam --landscape --angle 270 --outfile "$outf" "$1" 
    fi
    \zathura "$outf" &
    zathura_pid=$!
    if read -q "RES?Is this okay? "; then
        \rm "$1"
        mv "$outf" "$1"
    else 
        \rm "$outf"
    fi
    kill "$zathura_pid"
}

watch_file() {
    if [ "$1" = -h -o "$1" = --help -o -z "$1" -o -z "$2" -o ! -e "$1" ]; then
        echo "USAGE: watch_file FILE COMMAND [ARGUMENTS...]"
        return 1
    fi
    local f="$1"
    shift
    local command_and_args="$*"
    local now
    while true; do 
        inotifywait -e close_write "$f" &>/dev/null
        now="$(date '+%H:%M:%S')"
        echo "$now - $f was written"
        echo "$now - Running -- eval \"$command_and_args\""
        eval "$command_and_args"
        now="$(date '+%H:%M:%S')"
        echo "$now - Done. Watching for writes."
    done
}

pandoc_watch () {
    echo "Starting to watch $1"
    mdfile="$1"
    pdffile="$(basename $1 .md)"
    while true; do 
        inotifywait -e close_write "$mdfile"
        if [ "$2" = "--xelatex" ]; then
            pandoc --citeproc "$1" -o "${pdffile}.pdf" --pdf-engine=xelatex
        else
            pandoc --citeproc "$1" -o "${pdffile}.pdf"
        fi
    done &>>!pandoc.log &
}

serve_books () {
    addr="${1:-$HOME/books}"
    echo "$addr"
    echo "Sudo password might be required?"
    sudo echo ""
    sudo /home/pinusc/builds/linux-router/lnxrouter --ap wlp3s0 sacripante -g 192.168.1.1 -p peppe1999 &
    rclone serve --addr :0 --user giusb --pass peppe99 ftp "$addr" &
    sleep 1
    read -q "?Press anything to exit... "
    kill %%
}

tilderadio () {
    mpv 'https://azuracast.tilderadio.org/radio/8000/radio.ogg'
}

tea-timer-gotify () {
    tea-timer.pl --notify-command='gotify-cli p -t "Tea-Timer" "Pu-er your tea now"' $*
}

lms_reload () {
    http "https://music.giusb.party/rest/startScan" u==admin p==$(pass show servers/medoro/lms | head -n 1) c==curl v==1.16.0
}

lms_scan=lms_reload
music_scan=lms_reload
scan_lms=lms_reload
alias bbr="rlwrap bb repl"

bspc-rule-add () {
    if [ "$#" -lt 1 ]; then
        echo "USAGE: bspc-rule-add [[rule=out] ...]"
        return 1
    fi
    echo "Click on a window now..."
    local wmclass
    local CONFIG_FILE="$XDG_CONFIG_HOME/bspwm/bspwm_rules"
    wmclass="$(xprop | awk '/WM_CLASS/{ print $4; }' | tr -d \")"
    echo "WMCLASS: $wmclass"
    echo "rule: bspc rule --add \"$wmclass\"" "$@"
    echo ""
    echo ""
    bspc rule --add "$wmclass" "$@"
    echo "Committing to $CONFIG_FILE..."
    echo bspc rule --add "$wmclass" "$@" >> "$CONFIG_FILE"
    echo "bspc rule --list:"
    bspc rule --list
}
new_bspc_rule=bspc-rule-add

tilderadio="mpv https://tilderadio.org/listen"

bak () {
    file="$1"
    mv "$file" "$file.bak"
}

wormhole-qr () {
    local tmpfile="$(mktemp "$TMPDIR/wormhole-XXXX")"
    echo "$tmpfile"
    wormhole send "$1" &>! "$tmpfile" &
    while [ -z "$code" ]; do
        local code="$(< "$tmpfile" awk -F': ' '/code is/{ print $2; }')"
        cat "$tmpfile"
    done
    # echo "Code: $code"
    qrencode -t UTF8 'wormhole:relay.magic-wormhole.io:4000/?code='"$code"
    fg %wormhole
}

alias gdeploy="~/builds/gdeploy/main.js"
